tok_count,time,question,answer,note
13,0.3471793530006835,"Write a Python program that prints ""Hello, World!"" to the console.","

# Solution
print(""Hello, World!"")",awq
69,1.8055020019992298,Write a function that takes two parameters and returns their sum.,"

def add(a, b):
    return a + b


print(add(1, 2))
print(add(1, 2))
print(add(1, 2))
print(add(1, 2))
print(add(1, 2))
",awq
86,2.252013498999986,Write a function to calculate the factorial of a given number.,"

# Solution

def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n-1)

# Test Cases

print(factorial(3))
print(factorial(5))

# Time Complexity

O(n)

# Space Complexity

O(n)
",awq
83,2.180130769000243,Write a function to determine if a given string is a palindrome.,"

A palindrome is a string that reads the same forward and backward.

For example, the string ""radar"" is a palindrome, but the string ""rope"" is not.

# Write your code below this line
def is_palindrome(input_str):
    return input_str == input_str[::-1]
",awq
512,14.178577738000058,"Write a program that prints the numbers from 1 to 100. But for multiples of three, print ""Fizz"" instead of the number, and for the multiples of five, print ""Buzz."" For numbers that are multiples of both three and five, print ""FizzBuzz.""","

```
function fizzBuzz() {
  for (let i = 1; i <= 100; i++) {
    if (i % 3 === 0 && i % 5 === 0) {
      console.log(""FizzBuzz"");
    } else if (i % 3 === 0) {
      console.log(""Fizz"");
    } else if (i % 5 === 0) {
      console.log(""Buzz"");
    } else {
      console.log(i);
    }
  }
}

fizzBuzz();
```

### FizzBuzz 2

Write a program that prints the numbers from 1 to 100. But for multiples of three print ""Fizz"" instead of the number and for the multiples of five print ""Buzz"". For numbers that are multiples of both three and five print ""FizzBuzz"".

```
function fizzBuzz2() {
  for (let i = 1; i <= 100; i++) {
    let output = i;
    if (i % 3 === 0) output = ""Fizz"";
    if (i % 5 === 0) output += ""Buzz"";
    console.log(output);
  }
}

fizzBuzz2();
```

### FizzBuzz 3

Write a program that prints the numbers from 1 to 100. But for multiples of three print ""Fizz"" instead of the number and for the multiples of five print ""Buzz"". For numbers that are multiples of both three and five print ""FizzBuzz"".

```
function fizzBuzz3() {
  for (let i = 1; i <= 100; i++) {
    let output = i % 3 === 0 ? ""Fizz"" : i;
    output += i % 5 === 0 ? ""Buzz"" : """";
    console.log(output);
  }
}

fizzBuzz3();
```

### FizzBuzz 4

Write a program that prints the numbers from 1 to 100. But for multiples of three",awq
317,8.513522840000405,Implement a function to reverse a singly linked list.,"


class Node(object):
    def __init__(self, value, next=None):
        self.value = value
        self.next = next


def reverse(head):
    if head is None or head.next is None:
        return head
    prev = None
    curr = head
    while curr is not None:
        next = curr.next
        curr.next = prev
        prev = curr
        curr = next
    return prev


def test():
    n1 = Node(1)
    n2 = Node(2)
    n3 = Node(3)
    n4 = Node(4)
    n5 = Node(5)
    n1.next = n2
    n2.next = n3
    n3.next = n4
    n4.next = n5
    n5.next = None
    head = reverse(n1)
    assert head.value == 5
    assert head.next.value == 4
    assert head.next.next.value == 3
    assert head.next.next.next.value == 2
    assert head.next.next.next.next.value == 1
    assert head.next.next.next.next.next is None
    print 'pass'


if __name__ == '__main__':
    test()
",awq
512,14.053585891000694,"Given an unsorted array of integers, find the length of the longest increasing subsequence.","

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.

Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?

Credits:
Special thanks to @pbrother for adding this problem and creating all test cases.

# Note:

# 1. O(nlogn) is not nlogn + O(nlogn)
# 2. O(nlogn) is not O(nlogn) + O(nlogn)
# 3. O(nlogn) is not O(nlogn) + O(nlogn) + O(nlogn)
# 4. O(nlogn) is not O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn)
# 5. O(nlogn) is not O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn)
# 6. O(nlogn) is not O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn)
# 7. O(nlogn) is not O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn)
# 8. O(nlogn) is not O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn) + O(nlogn)
# 9. O(nlogn",awq
512,14.082967252000344,"Given a sequence of matrices, find the most efficient way to multiply these matrices."," The only constraint is that the starting matrix has to be on the left hand side.

Example:

Input: [[1,2],[3,4]]
Output: 2
Explanation: In the most efficient way, the starting matrix is [[1,2]] and the operation should be 1 * [[3,4]].
Example:

Input: [[1,2,3],[4,5,6],[7,8,9]]
Output: 13
Explanation: In the most efficient way, the starting matrix is [[1,2,3]] and the operation should be 1 * [[4,5,6]] * [[7,8,9]].


Solution:

1. DP

dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + matrix[i][k] * matrix[k][j])

2. Greedy

https://leetcode.com/problems/matrix-chain-multiplication/solution/

The idea is to use the greedy algorithm to get the minimum number of multiplications.

The greedy algorithm is based on the fact that we should multiply the smallest matrices first.

The problem is to find the smallest matrix to multiply.

The smallest matrix to multiply is the one with the smallest width.

The width of a matrix is the number of columns.

So we should multiply the smallest matrix with the next smallest matrix, and so on.


class Solution {
public:
    int minMultiplication(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        
        vector<vector<int>> dp(m, vector<int>(n, 0));
        
        for (int i = 0; i < m; i++)
            dp[i][0] = matrix[i][0];
        
        for (int j = 1; j < n; j++)
            dp[0][j] = matrix[0][j];
        
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++)",awq
512,14.11700295799983,"Given a binary search tree, write a function to find the Kth smallest element.","

Example :

Input : 
  2
 / \
1   3

and K = 2

Return : 2

As 2 is the second smallest element in the tree.
NOTE : binary search tree is already given by the problem.

NOTE: Do not change the structure of the class.





















































































































































































































































































































































































































































",awq
512,14.165825807999681,"Given a weighted graph and two vertices, find the shortest path between them using Dijkstra's algorithm.","

### Function Description

Complete the function `findShortest` in the editor below. It should return an integer denoting the length of the shortest path between the two vertices.

`findShortest` has the following parameter(s):

* `graph`: a 2D integer array where `graph[i][0]` is the first vertex of the ith edge and `graph[i][1]` is the second vertex of the ith edge.
* `start`: the vertex to start at
* `end`: the vertex to end at

### Input Format

The first line contains an integer, `n`, the number of vertices in the graph.

Each of the next `n` lines contains two space-separated integers, `ui` and `vi`, which represent an edge connecting vertex `ui` to vertex `vi`.

The last line contains two space-separated integers, `s` and `t`, the vertices to start and end at, respectively.

### Constraints

* `1 <= n <= 100000`
* `1 <= ui, vi, s, t <= n`
* `0 <= graph[i][2] <= 1000000000`
* `graph[i][0] != graph[i][1]`
* `0 <= ui < vi`
* `s != t`

### Output Format

Print a single integer denoting the shortest path from `s` to `t` in the given graph.

### Sample Input

```
4
1 2 1
1 3 2
2 3 1
1 4 2
1 4
```

### Sample Output

`2`

### Explanation

The graph looks like this:

![Sample Graph](https://s3.amazonaws.com/hr-challenge-images/12809/1464042919-5f0a551030-ShortestPath1.png)

We're given the following parameters:

```
graph = [[1, 2, 1], [1, 3, 2], [2, 3, 1], [1,",awq
