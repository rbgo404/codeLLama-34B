question,note,tok_count,time,answer
def factorial(int n):,vLLM,433,7.1842867950035725,"
    if (n <= 1):
        return 1
    else:
        return n * factorial(n - 1)

def gcd(int n, int m):
    if (m < 0):
        m *= -1
    if (n == 0):
        return m
    else:
        return gcd(m%n, n)

assert ""Which operation do you want to calculate?"" == raw_input(""Which operation do you want to calculate? 0 = factorial | 1 = gcd \n"")
op = int(raw_input(""Operation: "")
if (op == 0):
    assert ""Which of the following? 0 = binary | 1 = octal | 2 = hexadecimal | 3 = decimal \n"" == raw_input(""Which of the following? 0 = binary \
| 1 = octal | 2 = hexadecimal | 3 = decimal \n"")
    pref = ""0b"" if op == 0 else ""0o"" if op == 1 else ""0x"" if op == 2 else ""0d""
    n = str(raw_input(""Number: ""))
    while (""-"" in p(n) and ""-"" not in pref) and p(n) != ""-0"":
        print(""Not a negative number!"")
        n = str(raw_input(""Number: ""))
    if ""-"" in p(n) and ""-"" in pref:
        p(-int(n, gcd(p(n), 10)))
    else:
        p(int(n, 10))
elif (op == 1):
    x = int(raw_input(""x = ""))
    y = int(raw_input(""y = ""))
    p(factorial(gcd(x, y)))
"
def factorial(int n):,vLLM,68,1.1394071070244536,"
    int fac = 1
    for i in range(1, n+1) fac *= i
    return fac

def main():
    def n = 20
    print(""\nFactorial of"", n, ""is:"", factorial(n))

main()
"
"Write a Python program that prints ""Hello, World!"" to the console.",vLLM,54,0.9379832889826503,"
Now, this one is simple, thanks to this online interactive editor, you can just run the code below.
When you run the above code, it should print ""Hello World"" onto the screen. Awesome! You are learning Python by the hour."
Write a function that takes two parameters and returns their sum.,vLLM,30,0.5427189659967553," Call the function twice in your main method, passing in the sum of the returns. Why doesn't the first call to the method work?"
Write a function to calculate the factorial of a given number.,vLLM,180,2.998036957025761," Ignore the cases when the given number is less than 0 or greater than 16.
''''
def fac(n):
	try:
		if n==14:
			return ""Not Available""
		elif int(n)<0:
			return ""Input a valid number"" 
		elif n<0:
			return ""Input a positive integer number"" 
		elif 16==n:
			return ""Not Available""
		else:	
			return n*fac(n-1)
	except:
		return ""invalid input""
num=input(""enter the number:"")
res=fac(num)
print str(num)+""!=""+str(res)
"
Write a function to determine if a given string is a palindrome.,vLLM,85,1.4426924290019087,"

# Question Link:

https://leetcode.com/explore/challenge/card/june-leetcoding-challenge/540/week-2-june-8th-june-14th/3358/

# Techie's Choice 

### Happy Coding 👍
"
"Write a program that prints the numbers from 1 to 100. But for multiples of three, print ""Fizz"" instead of the number, and for the multiples of five, print ""Buzz."" For numbers that are multiples of both three and five, print ""FizzBuzz.""",vLLM,72,1.2940416880010162,"

# Answer


print ('1Fizz' if i%3 else i) or ((i ** str(i) if i % 5 else Fizz) if i % 5) for i in range (1, 100)
#or print 'a' if true, else print 'b'
"
Implement a function to reverse a singly linked list.,vLLM,512,8.545508686016547,"

click to show more hints.

Hint:
A linked list can be reversed either iteratively or recursively. Could you
implement both?


Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

The key is to connect the old head with new head (after reversing the original one).
Next is the old head that keeps the old data structure. After reversing it, make all its next points to the old head and make old head's next to be None, so that you can easily connect it with new head.

Finally, reverse the head pointer and return it.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
# class Solution:
#     def reverseList(self, head):
#         """"""
#         :type head: ListNode
#         :rtype: ListNode
#         """"""
#         return self.helper(head, None)
#
#     def helper(self, head, new_head):
#         if head is None:
#             return new_head
#
#         nextTemp, head.next = head.next, new_head
#         #self.helper(self, head.next, head)
#         return self.helper(nextTemp, head)

# with extra space
# https://www.youtube.com/watch?v=eKNuhDw opportunity board viewerjdsjfsjf
def foo():
    for i in range(3):
        print(i)

class Solution(object):
    def reverseList(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""
        prev = None
        cur = head
        while cur:
            next = cur.next
            cur.next = prev
            prev = cur
            cur = next
        return prev


head = ListNode(1)
p1 = ListNode(2)
p2 = ListNode(3)
p3 = ListNode(4)"
"Given an unsorted array of integers, find the length of the longest increasing subsequence.",vLLM,390,6.518860729993321,"

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.

Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?

Credits:
Special thanks to @pbrother for adding this problem and creating all test cases.

# Idea: don't use a elem in the LIS if any elem before it can be replaced by it

# 13.586ms 98.36%
class Solution {
    public int lengthOfLIS(int[] nums) {
        int len = nums.length;
        if (len == 0) {
            return 0;
        }

        int[] dp = new int[len];
        int res = 0;

        Arrays.fill(dp, 1);
        for (int i = 0; i < dp.length; i++) {
            for (int j = i-1; j >= 0; j--) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j]+1);
                }
            }
            res = Math.max(res, dp[i]);
        }

        return res;
    }
}

'''
"
"Given a sequence of matrices, find the most efficient way to multiply these matrices.",vLLM,85,1.4589473599917255,"

In other words, determine where to put parentheses to minimize the number of operations.

You may assume that the input is well formed.

Example 1:

Input: [A, B, C, D]
Output: (A(BCD))

Input: [E, F, G, H]
Output: (EF(GH))


"
"Given a binary search tree, write a function to find the Kth smallest element.",vLLM,503,8.433357027999591,"
Example
Given binary search tree: root = [3,1,4,null,2], and K = 1

    3
   / \
  1   4
   \
    2

return 1.

Note:
You may assume that the BST is already sorted.
""""""
# In-place solution
class Solution:
    """"""
    @param root: the root of binary tree
    @param k: an integer
    @return: the kth smallest element
    """"""
    def kthSmallest(self, root, k):
        self.k = k
        self.target = None
        self.inorderTraverse(root, self.k)
        return self.target


    def inorderTraverse(self, node, k):
        if node is None or (self.target is not None):
            return

        self.inorderTraverse(node.left, k)
        if self.target is None:
            if k == 1:
                self.target = node.val
            k -= 1
        self.inorderTraverse(node.right, k)


# Better solution
class Solution:
    """"""
    @param root: the root of binary tree
    @param k: an integer
    @return: the kth smallest element
    """"""
    def kthSmallest(self, root, k):
        count, self.target = self.inorderTraverse(root, k)
        return self.target


    def inorderTraverse(self, node, k):
        count = 0
        if node is None:
            return count, None

        leftcount, lefttarget = self.inorderTraverse(node.left, k)
        if leftcount == k:
            return leftcount, lefttarget
        count = 1 + leftcount
        if leftcount == k - 1:
            self.target = node.val
            return count, self.target

        rightcount, righttarget = self.inorderTraverse(node.right, k - 1 - leftcount)
        count = count + rightcount
        return count, self.target"
"Given a weighted graph and two vertices, find the shortest path between them using Dijkstra's algorithm.",vLLM,177,3.0025783690216485,"
The first line of input contains the number of test cases.
For each test case, the first line of input is the number of edges in the graph.
This is followed by a line for each edge that contains the starting and ending vertices and the edge weight.
The edges are numbered from 1 to n with vertex numbering starting at 1.
Take care to mind these values as you implement your solution.
Finally, the last and third-to-last lines of each test case contain the starting and destination vertex numbers, respectively.
Print a single integer denoting the cost of the shortest path between the two vertices numbered.
There is no reason to explore edges starting from vertex b.
As a result, you should always run Dijkstra's algorithm on the smallest vertex in the adjacency list.
"
